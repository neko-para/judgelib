#ifndef _ALGORITHM_
#define _ALGORITHM_

#include <iterator>
#include <utility>
#include <functional>

namespace std {

template <typename InputIterator, typename Function>
inline Function for_each(InputIterator first, InputIterator last, Function fn) {
	while (first != last) {
		fn(*first);
		++first;
	}
	return fn;
}

template <typename InputIterator, typename UnaryPredicate>
inline InputIterator __find_if(InputIterator first, InputIterator last, UnaryPredicate pred, input_iterator_tag) {
	while (first != last && !pred(*first)) {
		++first;
	}
	return first;
}

template <typename InputIterator, typename UnaryPredicate>
inline InputIterator __find_if(InputIterator first, InputIterator last, UnaryPredicate pred, random_access_iterator_tag) {
	typename iterator_traits<InputIterator>::difference_type n = (last - first) >> 2;
	while (n--) {
		if (pred(*first)) {
			return first;
		}
		++first;
		if (pred(*first)) {
			return first;
		}
		++first;
		if (pred(*first)) {
			return first;
		}
		++first;
		if (pred(*first)) {
			return first;
		}
		++first;
	}
	while (first != last && !pred(*first)) {
		++first;
	}
	return first;
}

template <typename InputIterator, typename Type>
inline InputIterator find(InputIterator first, InputIterator last, const Type& value) {
	return __find_if(first, last, bind1st(equal_to<Type>(), value), iterator_traits<InputIterator>::iterator_category);
}

template <typename InputIterator, typename UnaryPredicate>
inline InputIterator find_if(InputIterator first, InputIterator last, UnaryPredicate pred) {
	return __find_if(first, last, pred, iterator_traits<InputIterator>::iterator_category);
}

template <typename InputIterator, typename ForwardIterator, typename UnaryPredicate>
inline InputIterator find_first_of(InputIterator first1, InputIterator last1, ForwardIterator first2, ForwardIterator last2, UnaryPredicate pred) {
	while (first1 != last1) {
		for (ForwardIterator it = first2; it != last2; ++it) {
			if (pred(*first1, *it)) {
				return first1;
			}
		}
		++first1;
	}
	return last1;
}

template <typename InputIterator, typename ForwardIterator>
inline InputIterator find_first_of(InputIterator first1, InputIterator last1, ForwardIterator first2, ForwardIterator last2) {
	return find_first_of(first1, last1, first2, last2, equal_to<typename iterator_traits<InputIterator>::value_type>());
}

template <typename InputIterator, typename ForwardIterator, typename UnaryPredicate>
inline InputIterator find_end(InputIterator first1, InputIterator last1, ForwardIterator first2, ForwardIterator last2, UnaryPredicate pred) {
	if (first2 == last2) {
		return last1;
	}
	InputIterator ret = last1;
	while (first1 != last1) {
		InputIterator p1 = first1;
		ForwardIterator p2 = first2;
		while (pred(*p1, *p2)) {
			++p1;
			++p2;
			if (p2 == last2) {
				ret = first1;
				break;
			}
			if (p1 == last1) {
				return ret;
			}
		}
		++first1;
	}
	return ret;
}

template <typename InputIterator, typename ForwardIterator>
inline InputIterator find_end(InputIterator first1, InputIterator last1, ForwardIterator first2, ForwardIterator last2) {
	return find_end(first1, last1, first2, last2, equal_to<typename iterator_traits<InputIterator>::value_type>());
}

template <typename ForwardIterator, typename BinaryPredicate>
inline ForwardIterator adjacent_find(ForwardIterator first, ForwardIterator last, BinaryPredicate pred) {
	if (first == last) {
		return last;
	}
	ForwardIterator prev = first;
	++first;
	while (first != last) {
		if (pred(*prev, *first)) {
			return prev;
		}
		++first;
		++prev;
	}
	return last;
}

template <typename ForwardIterator>
inline ForwardIterator adjacent_find(ForwardIterator first, ForwardIterator last) {
	return adjacent_find(first, last, equal_to<typename iterator_traits<ForwardIterator>::value_type>());
}

template <typename InputIterator, typename Type, typename UnaryPredicate>
inline typename iterator_traits<InputIterator>::difference_type count_if(InputIterator first, InputIterator last, const Type& value, UnaryPredicate pred) {
	typename iterator_traits<InputIterator>::difference_type n = 0;
	while (first != last) {
		if (pred(*first, value)) {
			++n;
		}
	}
	return n;
}

template <typename InputIterator, typename Type>
inline typename iterator_traits<InputIterator>::difference_type count(InputIterator first, InputIterator last, const Type& value) {
	return count_if(first, last, value, equal_to<typename iterator_traits<InputIterator>::value_type>());
}

template <typename InputIterator1, typename InputIterator2, typename UnaryPredicate>
inline pair<InputIterator1, InputIterator2> mismatch(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, UnaryPredicate pred) {
	while (first1 != last1) {
		if (!pred(*first1, *first2)) {
			return make_pair(first1, first2);
		}
		++first1;
		++first2;
	}
	return make_pair(first1, first2);
}

template <typename InputIterator1, typename InputIterator2>
inline pair<InputIterator1, InputIterator2> mismatch(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2) {
	return mismatch(first1, last1, first2, equal_to<typename iterator_traits<InputIterator1>::value_type>());
}

template <typename InputIterator1, typename InputIterator2, typename UnaryPredicate>
inline bool equal(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, UnaryPredicate pred) {
	while (first1 != last1) {
		if (!pred(*first1, *first2)) {
			return false;
		}
		++first1;
		++first2;
	}
	return true;
}

template <typename InputIterator1, typename InputIterator2>
inline bool equal(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2) {
	return equal(first1, last1, first2, equal_to<typename iterator_traits<InputIterator1>::value_type>());
}


template <typename InputIterator, typename ForwardIterator, typename UnaryPredicate>
inline InputIterator search(InputIterator first1, InputIterator last1, ForwardIterator first2, ForwardIterator last2, UnaryPredicate pred) {
	if (first2 == last2) {
		return first1;
	}
	while (first1 != last1) {
		InputIterator p1 = first1;
		ForwardIterator p2 = first2;
		while (pred(*p1, *p2)) {
			++p1;
			++p2;
			if (p2 == last2) {
				return first1;
			}
			if (p1 == last1) {
				return last1;
			}
		}
		++first1;
	}
	return last1;
}

template <typename InputIterator, typename ForwardIterator>
inline InputIterator search(InputIterator first1, InputIterator last1, ForwardIterator first2, ForwardIterator last2) {
	return search(first1, last1, first2, last2, equal_to<typename iterator_traits<InputIterator>::value_type>());
}

template <typename ForwardIterator, typename Size, typename Type, typename UnaryPredicate>
inline ForwardIterator search_n(ForwardIterator first, ForwardIterator last, Size count, const Type& value, UnaryPredicate pred) {
	typename iterator_traits<ForwardIterator>::difference_type n = distance(first, last);
	if (n < count) {
		return last;
	}
	n -= count;
	ForwardIterator limit = first;
	advance(limit, n);
	while (first != limit) {
		ForwardIterator it = first;
		Size i = 0;
		while (pred(*it, value)) {
			if (++i == count) {
				return first;
			}
			++it;
		}
	}
	return last;
}

template <typename ForwardIterator, typename Size, typename Type>
inline ForwardIterator search_n(ForwardIterator first, ForwardIterator last, Size count, const Type& value) {
	return search_n(first, last, count, value, equal_to<typename iterator_traits<ForwardIterator>::value_type>());
}

}

#endif